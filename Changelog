ChangeLog File for lhVimSpell
-----------------------------

Ver 0.5: 07th feb 2003
* From now on, only VIM 6.x is supported
* Simplifications
* Neither `cat' nor `TYPE' are used anymore.
* On a pure MsWindows box, 'sort | uniq' is emulated (thanks to
  system_utils.vim). If unixutils or Cygwin is installed and configured (ie,
  $PATH set in consequence), then set in .vimrc: g:unix_layer_installed to 1.
  The emulation of `sort' is much more slower than any sort.exe ; and
  Microsoft's SORT.EXE is inadequate as it is not case sensitive.
* Try to guess if Aspell or Ispell should be used according to their
  visibility from $PATH Done thanks to searchInRuntime.vim (if installed) or
  `which' on *nix systems.
* The path of the personal dictionaries is build with 'aspell config'
  $ASPELL is _no_ longer used!
* Jumping to prev/next misspelling doesn't move the cursor if there is no
  misspelling after or before the current position.
* Undo/redo resynch with the current word
* File type detection enhanced
* More accurate use of messages and `:silent' 
* Fewer number of "uncatched exceptions"
  - Can't ask for alternatives if files haven't been parsed first.
  - Can't show misspellings if files haven't been parsed first.
* VS_language can be local to the current buffer
* option: g:VS_map_leader (default to <M-s> on windows when &wak='no' ;
  <leader>s otherwise)
  Must be set before the plugin is loaded -> .vimrc
* Option: g:VS_jump_next_error_after changed into:
  g:VS_jump_to_next_error_after_validation
* Menus: 
  - are now customizable with g:VS_menu_priority and g:VS_menu_name
    Must be set before the plugin is loaded -> .vimrc
  - are loaded/unloaded and enabled according to the type of the current
    window (ie: corrector-windows or not)
  - Menus are synchronized with g:VS_map_leader, but not with any other
    customisation done by remapping to <Plug>VS_xxx.
  # but can't be submenu of standard menus is v:lang !~ English'
* The default colorscheme used for misspellings can be overrided with for
  instance:
  :highlight default SpellErrors ctermfg=Green guifg=Green cterm=underline gui=underline term=reverse
  Note: The default links `SpellErrors' to `Errors'.
* :VSVerbose ...
* Uses of :normal have been securized -> s/normal/normal!/
* a.vim changed into a.old.vim
* Help file updated

Ver 0.4: 04th feb 2003
* pathnames having spaces within are now supported on MsWindows (with Cygwin
  and $COMSPEC)
  But this requires system_utils.vim, which only works with vim 6.0+
* A new section about troubles on MsWindows have been added to the help file
* Microsoft's `TYPE' can be used instead of `cat'.
* Minor changes to the help file

Ver 0.3e: 04th aug 2002
* Changed $LANG to v:lang ; check your customization...
* Help file updated

Ver 0.3d: 30th jul 2002
* Fix a little bug with ignored words
  e.g.  wasn't able to add 'filetype' when 'filetypes' was present in the list
  of ignored words list.
* for VIM 6, mappings can be changed :
  - thanks to ':map ... <Plug>VS_foo' approach
* Help file updated

Ver 0.3c: 22nd jul 2002 
* The mappins are correctly set when editing several files with for instance
  > vim *.tex
* Fix a bug into VS_..add_word_directly_to_dict()


Ver 0.3b: 18th jul 2002
* When there is no misspelling, there is no more error message displayed
* The syntax highlighting rules for HTML files have been enhanced 
  -> syn cluster Spell add=SpellErrors,Normal
  Actually, it should work fine with other type of files : cs, dtml, java and
  m4 files ; Thanks to the maintainers of the corresponding syntax files and
  in particulary Claudio Fleiner.
  They have also been altered for TeX files : misspellings between TeX groups
  will be highlighted even if they are not true words.
* Help file updated

Ver 0.3: 03rd jul 2002
* First functional release of a non developper version
* Options more accessible
* Added g:VS_goto_next_error_after to jump to the next misspelling after a
  correction / ignore [idea from Matthias Veit's plugin]
* Take advantage of $LANG in order to determine the default value for
  g:VS_language
* Help file updated

Ver 0.2d: 27th feb 2002 
* The file is automatically saved before the parsing.
* Help file updated
  - Different updates

Ver 0.2c: 25th feb 2002 
* Still some dependencies reduced :
  - a.vim is added to the archive. The version is an old one that works with
    VIM 5.7, where the functions defined are not encapsulated (hidden),
    contrary to the latest version.
* Ignore feature improved    
  - The un-highlighting of ignored words has been fixed.
  - Ignored words are stored in a file in the ./.spell folder. Hence, they are
    still ignored when new words are added to the dictionary or when I/Aspell
    is re-run.
* Bug fix 
  - Oddities should not show up anymore when proposing alternatives for a
    string present in several already noticed misspellings.
* Help file updated
  - One TODO item done : list of ignored words implemented.

Ver 0.2b: 30th Jan 2002 
* Some dependencies removed:
  - help.vim is no longer required
  - Triggers.vim becomes facultative ; as this plugin is also boring to
    install (because it requires other plugins, etc), it is now possible to
    use Vim-Spell without Triggers.vim. As a consequence, the swapping
    language feature will be disabled. The detection of Triggers.vim is
    completely transparent.
  - dependencies towards a.vim and cat will remains.
* The help message for the Corrector buffer exists can be hidden

Ver 0.2: 27th Jan 2002 
* Slowly converted to version 6.0 of VIM :
  - The use of buffoption 2 is no more required with VIM 6.
    With VIM 5.xx, there is no way around.
    Unfortunately, using VIM 6.0 does not permit to have local menus --
    ie. menus associated to a buffer.
  - The mappings are all silent under VIM 6.0
  - In order to let this plugin usable from VIM 5.x and VIM 6, none of the
    other improvements from the 6th version are used (s:, <Plug>, <unique>,
    <SID>, etc.)
  -> <VS_*map*.vim>
* First fix to the insertion of accentuated words
  As I didn't succeeded to add accentuated words to the personal dictionary
  with Aspell (compiled with MinGW, under Windows); I added the possibility to
  directly add words within the personal dictionary.
  -> <VS_int-fun.vim>
* In the continuation of the previous fix, there is a new option:
  «g:VS_aspell_add_directly_to_dict» that enable to directly modify the
  personal dictionary without using Aspell. This option is to be used with
  care, I can't guaranty Aspell will always use the same format for pers.
  dict.  neither it works with ispell. This way of proceeding is much more
  quicker than using the pipe protocol.
  -> <VS_int-fun.vim>
* Correct the replacement of word:
  If a key sequence of a mapping is included within the word that will replace
  the current misspelling, the mapping is no more expanded/executed. Hence,
  "û" can replace "u" even if "<M-{>" is mapped to something.
  -> <VS_gui.vim>
* fix ExitSpell() -- called by <M-s>E
* Help file updated


Ver 0.1e:
* Perfect syntax matching with LaTeX files:
  - the LaTeX highlighting is keep,
  - stuff like \cmd{mizpelling} is highlighted, non keyword characters do not
    perturb anymore.
  Remark: The correction has been stolen from Dr. Charles E. Campbell, Jr.'s
  engspchk.vim plugin. It could/should be extended to other filetypes you may
  want to correct (HTML, c++, mail, etc.)
  -> <VS_fm-fun.vim>

Ver 0.1d: 13th Nov 2001
* Change the jumping functions (VS_SpchkPrev & VS_SpchkNext) to ignore
  errors that does not correspond to misspellings.

Ver 0.1c:
* Better syntax matching -> "\cmd{mizpelling}" will be highlighted
  within LaTeX commands.
  -> <VS_fm-fun.vim>
   exe '%s/^[&*#] \(\S\+\).*$/syntax match SpellErrors "\\<\1\\>"'.spell_options
  becomes
   exe '%s/^[&*#] \(\S\+\).*$/syntax keyword SpellErrors "\1"'.spell_options
  +
   syn region Misspelling start="\k" end="\W*" contains=SpellErrors transparent

  But it is still not perfect :-((
  "{MiZspell}" will signal the closing curly-bracket to be a TeXError
    
Ver 0.1b: 7th Nov 2001
* Add "SGML"-like support: XML, HTML, php, incl (personal extension I use)
  -> <VS_int-fun.vim>

Ver 0.1:
* Initial version
